{"ast":null,"code":"var _jsxFileName = \"/Users/nasanha/comaday/front/src/contexts/UserContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext(null);\nexport const useUser = () => {\n  _s();\n  const context = useContext(UserContext);\n  if (!context) throw new Error('useUser must be used within a UserProvider');\n  return context;\n};\n_s(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const UserProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const login = userData => {\n    setUser(userData);\n    localStorage.setItem('token', 'dummy-token'); // 실제 구현 시 JWT 토큰 저장\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","UserContext","useUser","_s","context","Error","UserProvider","children","_s2","user","setUser","login","userData","localStorage","setItem","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nasanha/comaday/front/src/contexts/UserContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { User } from '../types/user';\n\ninterface UserContextType {\n  user: User | null;\n  login: (user: User) => void;\n  logout: () => void;\n}\n\nconst UserContext = createContext<UserContextType | null>(null);\n\nexport const useUser = () => {\n  const context = useContext(UserContext);\n  if (!context) throw new Error('useUser must be used within a UserProvider');\n  return context;\n};\n\nexport const UserProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const login = (userData: User) => {\n    setUser(userData);\n    localStorage.setItem('token', 'dummy-token'); // 실제 구현 시 JWT 토큰 저장\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n  };\n\n  return (\n    <UserContext.Provider value={{ user, login, logout }}>\n      {children}\n    </UserContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASnE,MAAMC,WAAW,gBAAGL,aAAa,CAAyB,IAAI,CAAC;AAE/D,OAAO,MAAMM,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGP,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC3E,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CAJWD,OAAO;AAMpB,OAAO,MAAMI,YAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACrF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAc,IAAI,CAAC;EAEnD,MAAMa,KAAK,GAAIC,QAAc,IAAK;IAChCF,OAAO,CAACE,QAAQ,CAAC;IACjBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC;EAChD,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBL,OAAO,CAAC,IAAI,CAAC;IACbG,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED,oBACEhB,OAAA,CAACC,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAET,IAAI;MAAEE,KAAK;MAAEI;IAAO,CAAE;IAAAR,QAAA,EAClDA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACd,GAAA,CAlBWF,YAAqD;AAAAiB,EAAA,GAArDjB,YAAqD;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}