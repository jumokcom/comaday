{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // 쿠키를 포함하기 위해 필요\n});\n\n// 요청 인터셉터 추가\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","REACT_APP_API_URL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject"],"sources":["/Users/nasanha/comaday/front/src/api/apiClient.tsx"],"sourcesContent":["import axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // 쿠키를 포함하기 위해 필요\n});\n\n// 요청 인터셉터 추가\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token && config.headers) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport default apiClient; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACAP,SAAS,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,IAAID,MAAM,CAACL,OAAO,EAAE;IAC3BK,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAehB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}